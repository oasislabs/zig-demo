export declare class JsonRpcWebSocket {
    private url;
    /**
     * responses implements a request-response pattern for `send` requests.
     */
    private responses;
    /**
     * Middleware to plug into the websocket connection. Processes ws messages
     * prior to the default handler defined here.
     */
    private middleware;
    /**
     * JSON rpc request id auto counter.
     */
    private requestId;
    /**
     * lifecycle emits events pertaining to the lifecycle of the websocket,
     * e.g., when it opens or closes.
     */
    private lifecycle;
    /**
     * WebSocket through which all requests are sent.
     */
    private websocket;
    constructor(url: string, middleware: Middleware[]);
    private addEventListeners;
    private message;
    private runMiddleware;
    private handler;
    private open;
    private error;
    private close;
    connect(): void;
    disconnect(): void;
    request(request: JsonRpcRequest): Promise<any>;
    private nextId;
}
export declare type JsonRpcRequest = {
    method: string;
    params: Object[];
};
export interface Middleware {
    handle(message: any): any | undefined;
}
