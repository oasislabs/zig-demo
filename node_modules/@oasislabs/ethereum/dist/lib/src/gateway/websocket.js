import { EventEmitter } from 'eventemitter3';
var JsonRpcWebSocket = /** @class */ (function () {
    function JsonRpcWebSocket(url, middleware) {
        this.url = url;
        /**
         * responses implements a request-response pattern for `send` requests.
         */
        this.responses = new EventEmitter();
        /**
         * JSON rpc request id auto counter.
         */
        this.requestId = 0;
        /**
         * lifecycle emits events pertaining to the lifecycle of the websocket,
         * e.g., when it opens or closes.
         */
        this.lifecycle = new EventEmitter();
        this.middleware = middleware;
        this.websocket = makeWebsocket(url);
        this.addEventListeners();
    }
    JsonRpcWebSocket.prototype.addEventListeners = function () {
        this.websocket.addEventListener('message', this.message.bind(this));
        this.websocket.addEventListener('open', this.open.bind(this));
        this.websocket.addEventListener('error', this.error.bind(this));
        this.websocket.addEventListener('close', this.close.bind(this));
    };
    JsonRpcWebSocket.prototype.message = function (m) {
        m = this.runMiddleware(m);
        if (!m) {
            return;
        }
        this.handler(m);
    };
    JsonRpcWebSocket.prototype.runMiddleware = function (data) {
        this.middleware.forEach(function (m) {
            data = m.handle(data);
            if (!data) {
                return undefined;
            }
        });
        return data;
    };
    JsonRpcWebSocket.prototype.handler = function (m) {
        var data = JSON.parse(m.data);
        this.responses.emit("" + data.id, data);
    };
    JsonRpcWebSocket.prototype.open = function (event) {
        this.lifecycle.emit('open');
    };
    JsonRpcWebSocket.prototype.error = function (event) {
        this.lifecycle.emit('error');
    };
    JsonRpcWebSocket.prototype.close = function (event) {
        if (event.code !== CloseEvent.NORMAL) {
            this.connect();
            return;
        }
        this.lifecycle.emit('close');
    };
    JsonRpcWebSocket.prototype.connect = function () {
        // @ts-ignore
        this.websocket = makeWebsocket(this.url);
        this.addEventListeners();
    };
    JsonRpcWebSocket.prototype.disconnect = function () {
        this.websocket.close(CloseEvent.NORMAL);
    };
    JsonRpcWebSocket.prototype.request = function (request) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            // WebSocket is not open, so wait until it's open and try again.
            if (_this.websocket.readyState !== _this.websocket.OPEN) {
                _this.lifecycle.once('open', function () {
                    _this.request(request)
                        .then(resolve)
                        .catch(console.error);
                });
                return;
            }
            // Websocket is open so proceed.
            var id = _this.nextId();
            _this.responses.once("" + id, function (jsonResponse) {
                if (jsonResponse.error) {
                    reject(jsonResponse.error);
                }
                else {
                    resolve(jsonResponse);
                }
            });
            _this.websocket.send(JSON.stringify({
                id: id,
                jsonrpc: '2.0',
                method: request.method,
                params: request.params
            }));
        });
    };
    JsonRpcWebSocket.prototype.nextId = function () {
        this.requestId += 1;
        return this.requestId - 1;
    };
    return JsonRpcWebSocket;
}());
export { JsonRpcWebSocket };
var CloseEvent;
(function (CloseEvent) {
    CloseEvent[CloseEvent["NORMAL"] = 1000] = "NORMAL";
})(CloseEvent || (CloseEvent = {}));
function makeWebsocket(url) {
    // tslint:disable-next-line
    return typeof WebSocket !== 'undefined'
        ? // Browser.
            new WebSocket(url)
        : // Node.
            new (require('ws'))(url);
}
//# sourceMappingURL=websocket.js.map