var Subscriptions = /** @class */ (function () {
    function Subscriptions() {
        /**
         * Maps event names to their subscription ids. Used to implement
         * unsubscribe, as the client frontend knows nothing about the
         * actual subscription id.
         */
        this.subscriptionEventIds = new Map();
        /**
         * Maps subscriptionId to the callback to invoke whenever a message
         * with that id is handled.
         */
        this.subscriptionCallbacks = new Map();
    }
    Subscriptions.prototype.handle = function (message) {
        var data = JSON.parse(message.data);
        if (data.params && data.params.subscription) {
            var callback = this.subscriptionCallbacks.get("" + data.params.subscription);
            if (callback) {
                callback(data);
            }
            return undefined;
        }
        return message;
    };
    Subscriptions.prototype.add = function (event, subscriptionId, callback) {
        this.subscriptionEventIds.set(event, subscriptionId);
        this.subscriptionCallbacks.set(subscriptionId, callback);
    };
    Subscriptions.prototype.remove = function (event) {
        var id = this.subscriptionEventIds.get(event);
        if (!id) {
            return undefined;
        }
        this.subscriptionEventIds.delete(event);
        this.subscriptionCallbacks.delete(id);
        return id;
    };
    return Subscriptions;
}());
export { Subscriptions };
//# sourceMappingURL=subscriptions.js.map