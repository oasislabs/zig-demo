import { OasisGateway, DeployRequest, DeployResponse, RpcRequest, RpcResponse, SubscribeRequest, UnsubscribeRequest, PublicKeyRequest, PublicKeyResponse, GetCodeRequest, GetCodeResponse } from '@oasislabs/service';
import { Transaction } from './transaction';
export declare class Web3Gateway implements OasisGateway {
    /**
     * Websocket connection to the remote gateway.
     */
    private ws;
    /**
     * Subscription middleware for the websocket connection.
     */
    private subscriptions;
    /**
     * Builds well formed transactions that are ready for signing.
     */
    private transactions;
    /**
     * Wallet for signing transactions.
     */
    private wallet;
    constructor(url: string, wallet: Wallet);
    deploy(request: DeployRequest): Promise<DeployResponse>;
    rpc(request: RpcRequest): Promise<RpcResponse>;
    subscribe(request: SubscribeRequest): any;
    web3Subscribe(eventName: string, params: any[]): any;
    unsubscribe(request: UnsubscribeRequest): Promise<void>;
    publicKey(request: PublicKeyRequest): Promise<PublicKeyResponse>;
    disconnect(): void;
    getCode(request: GetCodeRequest): Promise<GetCodeResponse>;
}
export default interface Wallet {
    sign(tx: Transaction): Promise<string>;
    address: string;
}
