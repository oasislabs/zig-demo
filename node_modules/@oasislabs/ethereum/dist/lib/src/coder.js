var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { keccak256 } from 'js-sha3';
import { Interface } from 'ethers/utils/interface';
import { bytes } from '@oasislabs/common';
var EthereumCoder = /** @class */ (function () {
    function EthereumCoder() {
    }
    EthereumCoder.prototype.encode = function (fn, args, _options) {
        return __awaiter(this, void 0, void 0, function () {
            var iface;
            return __generator(this, function (_a) {
                iface = new Interface([fn]);
                // @ts-ignore
                return [2 /*return*/, iface.functions[fn.name].encode(args)];
            });
        });
    };
    EthereumCoder.prototype.decode = function (fn, data, constructor) {
        return __awaiter(this, void 0, void 0, function () {
            var iface, output;
            return __generator(this, function (_a) {
                iface = new Interface([fn]);
                output = iface.functions[fn.name].decode(data);
                // @ts-ignore
                if (fn.outputs.length === 1) {
                    return [2 /*return*/, output[0]];
                }
                return [2 /*return*/, output];
            });
        });
    };
    EthereumCoder.prototype.decodeError = function (error) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, bytes.decodeUtf8(error)];
            });
        });
    };
    EthereumCoder.prototype.initcode = function (abi, params, bytecode) {
        return __awaiter(this, void 0, void 0, function () {
            var iface;
            return __generator(this, function (_a) {
                iface = new Interface(abi);
                return [2 /*return*/, iface.deployFunction.encode(bytes.toHex(bytecode), params)];
            });
        });
    };
    EthereumCoder.prototype.functions = function (idl) {
        return idl.filter(function (fn) { return fn.type === 'function'; });
    };
    EthereumCoder.prototype.topic = function (event, idl) {
        var format = sighashFormat(event, idl);
        return keccak256(format);
    };
    EthereumCoder.prototype.decodeSubscriptionEvent = function (log, abi) {
        var iface = new Interface(abi);
        return iface.parseLog(log).values;
    };
    return EthereumCoder;
}());
export { EthereumCoder };
export function sighashFormat(event, idl) {
    var items = idl.filter(function (fn) { return fn.type === 'event' && fn.name === event; });
    if (items.length !== 1) {
        throw new Error("Must have a single event for " + event);
    }
    var inputs = items[0].inputs.map(function (i) { return i.type; }).join(',');
    return event + "(" + inputs + ")";
}
//# sourceMappingURL=coder.js.map