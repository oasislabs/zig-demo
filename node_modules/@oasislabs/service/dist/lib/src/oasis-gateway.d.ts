import EventEmitter from 'eventemitter3';
import { Address, PublicKey, Bytes } from '@oasislabs/types';
/**
 * OasisGateway is the client's interface used to access services running on Oasis.
 */
export interface OasisGateway {
    deploy(request: DeployRequest): Promise<DeployResponse>;
    rpc(request: RpcRequest): Promise<RpcResponse>;
    subscribe(request: SubscribeRequest): EventEmitter;
    unsubscribe(request: UnsubscribeRequest): any;
    publicKey(request: PublicKeyRequest): Promise<PublicKeyResponse>;
    getCode(request: GetCodeRequest): Promise<GetCodeResponse>;
    disconnect(): any;
}
export declare type DeployRequest = {
    data: Bytes;
    options?: RpcOptions;
};
export declare type DeployResponse = {
    address: Address;
};
export declare type PublicKeyRequest = {
    address: Address;
};
export declare type GetCodeRequest = {
    address: Address;
};
export declare type GetCodeResponse = {
    code: Uint8Array;
};
export declare type RpcRequest = {
    data: Bytes;
    address?: Address;
    options?: RpcOptions;
};
export declare type RpcOptions = {
    gasLimit?: string;
    gasPrice?: string;
    value?: string;
    aad?: string;
};
export declare type RpcResponse = {
    output: any;
    error?: Uint8Array;
};
export declare type SubscribeRequest = {
    event: string;
    filter?: SubscribeFilter;
};
export declare type SubscribeFilter = {
    address: Address;
    topics: Bytes[];
};
export declare type UnsubscribeRequest = {
    event: string;
};
export declare type PublicKeyResponse = {
    publicKey?: PublicKey;
};
export declare const SubscribeTopic = "subscription";
/**
 * setGateway sets the default oasis gateway so that all services use it
 * unless explicity overriden upon construction of the service.
 */
export declare function setGateway(gw: OasisGateway): void;
export declare function defaultOasisGateway(): OasisGateway;
